import sys

def floyds_algorithm(n, edges, distanceThreshold):
    INF = sys.maxsize
    dist = [[INF for _ in range(n)] for _ in range(n)]

    for i in range(n):
        dist[i][i] = 0

    for u, v, w in edges:
        dist[u][v] = w
        dist[v][u] = w

    for k in range(n):
        for i in range(n):
            for j in range(n):
                dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])

    return dist

# Test Case 1
n = 5
edges = [[0,1,2],[0,4,8],[1,2,3],[1,4,2],[2,3,1],[3,4,1]]
distanceThreshold = 2
result = floyds_algorithm(n, edges, distanceThreshold)
print("Distance Matrix:")
for row in result:
    print(row)

# Test Case 2
def find_shortest_path(distances, city1, city2):
    return distances[city1][city2]

# Test Case 2a
print("\nShortest path from C to A:", find_shortest_path(result, 2, 0))

# Test Case 2b
print("Shortest path from E to C:", find_shortest_path(result, 4, 2))
